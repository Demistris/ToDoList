@using ToDoListProject.Models
@using ToDoListProject.Pages
@inject ToDoService ToDoService
@inject ToDoListManager ToDoListManager
@inject ToDoListComponent ToDoListComponent
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ToDoListProject</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="lists">
                <span class="oi oi-list" aria-hidden="true"></span> Manage Lists
            </NavLink>
        </div>
        @foreach (var list in ToDoService.GetAllLists())
        {
            <div class="nav-item px-3" data-list-id="@list.Id">
                <NavLink href="@($"/list/{list.Id}")" class="nav-link">
                    <span class="oi oi-list-rich" aria-hidden="true"></span>

                    @if (_editingListId == list.Id)
                    {
                        <input @bind="_editingListName"
                               @bind:event="oninput"
                               @onkeydown="@(e => HandleKeyDown(e, list))"
                               @onfocusout="@(() => FinishEditing(list))"
                               style="width: 100%; height: 100%;" />
                    }
                    else
                    {
                        @* <span>@list.ListName</span> *@
                        @* <span>@(list.Id == _editingListId ? _editingListName : _selectedListName)</span> *@
                        <span>@(list.Id == _editingListId ? _editingListName : list.ListName)</span>
                    }
                </NavLink>
            </div>
        }

        <div class="nav-item px-3 mt-auto">
            <button class="btn btn-primary w-100" @onclick="AddNewList">Add List</button>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string _editingListId;
    private string _editingListName;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ToDoListComponent.ListNameChanged += MyObject_ListNameChanged;
    }

    private void MyObject_ListNameChanged(object sender, EventArgs e)
    {
        var list = ToDoService.GetAllLists().FirstOrDefault(l => l.Id.ToString() == sender.ToString());
        
        if (list != null)
        {
            list.ListName = sender.ToString();
            StateHasChanged();
        }

        StateHasChanged();
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task HandleKeyDown(KeyboardEventArgs e, ToDoListModel list)
    {
        if (e.Key == "Enter")
        {
            await FinishEditing(list);
        }
    }

    private async Task FinishEditing(ToDoListModel list)
    {
        if (string.IsNullOrWhiteSpace(_editingListName))
        {
            _editingListName = GenerateUntitledName();
        }

        list.ListName = _editingListName;
        _editingListId = null;
        await ToDoService.UpdateList(list);
        NavigationManager.NavigateTo($"/list/{list.Id}");
        StateHasChanged();
    }

    private string GenerateUntitledName()
    {
        int counter = 1;
        string baseName = "Untitled";
        string newName;
        do
        {
            newName = $"{baseName}{counter}";
            counter++;
        } while (ToDoService.GetAllLists().Any(l => l.ListName == newName));
        return newName;
    }

    private async Task AddNewList()
    {
        var newList = await ToDoListManager.AddList();

        if (newList != null)
        {
            _editingListId = newList.Id;
            _editingListName = "";
            StateHasChanged();
            await Task.Delay(50);
            await FocusNewInput(newList.Id);
        }
    }

    private async Task FocusNewInput(string listId)
    {
        await JS.InvokeAsync<object>("focusNewInput", listId);
    }
}