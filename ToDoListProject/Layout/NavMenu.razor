@using ToDoListProject.Models
@using ToDoListProject.Pages
@using ToDoListProject.Services
@inject ToDoService ToDoService
@inject NavigationService NavigationService
@inject ToDoListComponent ToDoListComponent
@inject IJSRuntime JS

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ToDoListProject</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="register">
                <span class="oi oi-plus" aria-hidden="true"></span> Register
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="login">
                <span class="oi oi-account-login" aria-hidden="true"></span> Login
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <div class="position-relative">
                <input class="form-control pe-4" @bind-value="_searchTerm" @bind-value:event="oninput" placeholder="Search" />
                <i class="fa-solid fa-magnifying-glass position-absolute top-50 end-0 translate-middle-y pe-2"></i>
            </div>
        </div>

        @foreach (ToDoListModel list in _filteredLists)
        {
            <div class="nav-item px-3" data-list-id="@list.Id">
                <NavLink href="@($"/list/{list.Id}")" class="nav-link d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center">
                        <span class="oi oi-list-rich" aria-hidden="true"></span>
                        @if (_editingListId == list.Id)
                        {
                            <form @onsubmit="@((e) => FinishEditing(list))" style="width: 100%;">
                                <input class="form-control" 
                                       @bind="_editingListName"
                                       @bind:event="oninput"
                                       @onfocusout="@(() => FinishEditing(list))"
                                       style="width: 100%; height: 100%;" />
                            </form>
                        }
                        else
                        {
                            <span>@(list.Id == _editingListId ? _editingListName : list.ListName)</span>
                        }
                    </div>
                    @{
                        int uncompletedCount = ToDoService.GetUncompletedCount(list.Id);
                        if (uncompletedCount > 0)
                        {
                            <span class="badge bg-secondary">@uncompletedCount</span>
                        }
                    }
                </NavLink>
            </div>
        }

        <div class="nav-item px-3 mt-auto">
            <button class="btn btn-primary w-100 text-md-start" @onclick="AddNewList"><i class="fa-solid fa-plus"></i> &nbsp; Add new list</button>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private List<ToDoListModel> _lists;
    private string _editingListId;
    private string _editingListName;
    private int _uncompletedCount;
    private string _searchTerm = "";

    private List<ToDoListModel> _filteredLists => _lists.Where(list => list.ListName.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _lists = ToDoService.GetAllLists();
        ToDoListComponent.ListNameChanged += MyObject_ListNameChanged;
        ToDoService.ListUpdated += MyObject_ListUpdated;
    }

    private void MyObject_ListNameChanged(object sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void MyObject_ListUpdated(object sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task AddNewList()
    {
        var newList = await ToDoService.AddList();

        if (newList != null)
        {
            _editingListId = newList.Id;
            _editingListName = "";
            StateHasChanged();

            await FocusNewInput(newList.Id);
        }
    }

    private async Task FocusNewInput(string listId)
    {
        await JS.InvokeAsync<object>("focusNewInput", listId);
    }

    private async Task FinishEditing(ToDoListModel list)
    {
        if (string.IsNullOrWhiteSpace(_editingListName))
        {
            _editingListName = GenerateUntitledName();
        }

        if (_editingListName.Length > 100)
        {
            _editingListName = _editingListName.Length <= 100 ? _editingListName : _editingListName[..100];
        }

        list.ListName = _editingListName;
        _editingListId = null;
        await ToDoService.UpdateList(list);
        NavigationService.NavigateToList($"{list.Id}");
        StateHasChanged();
    }

    private string GenerateUntitledName()
    {
        int counter = 1;
        string baseName = "Untitled";
        string newName;
        do
        {
            newName = $"{baseName}{counter}";
            counter++;
        } while (ToDoService.GetAllLists().Any(l => l.ListName == newName));
        return newName;
    }
}