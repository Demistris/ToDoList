@using ToDoListProject.Pages
@inject NavigationManager NavigationManager
@inject ToDoListManager ListManager

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ToDoListProject</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="manageLists" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Manage Lists
            </NavLink>
        </div>

        @foreach (var list in ListManager.ToDoLists)
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" @onclick="() => NavigateToList(list.Id)">
                    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> @list.ListName
                </NavLink>
            </div>
        }
        <button @onclick="ListManager.CreateNewList">+ Add new list</button>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void NavigateToList(string listId)
    {
        NavigationManager.NavigateTo($"/toDoList/{listId}", forceLoad: true);
    }
}